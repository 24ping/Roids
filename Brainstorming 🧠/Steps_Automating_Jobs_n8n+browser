# Automating Job Applications with n8n + Browser Automation

## How to Set It Up (n8n + Browser Automation)

### 1. Scrape & Clean (you already have this)

**Nodes:**
- **Cron** → Triggers the workflow periodically.  
- **HTTP Request / Apify actor** → Scrapes job listings.  
- **Code** → Runs your `splitTitle` and `cleanLever` functions.  
- **IF** → Filters by role keywords, location, or remote options.

**Tip:**  
Keep a deduplication store (Google Sheet, Notion, or database) keyed by `hash(url)` so you don’t re-apply to the same job twice.

---

### 2. Route to an “Apply Queue”

**Condition:**  
If the job’s URL host matches known ATS domains (for example: `jobs.lever.co`, `boards.greenhouse.io`, or `myworkdayjobs.com`) and contains an `/apply` link,  
push it to a queue (such as a Google Sheet or database).

**Fields to store:**
- company  
- role  
- url  
- resume_variant  
- cover_letter_variant  
- status = `PENDING`

---

### 3. Human-in-the-Loop (optional but recommended)

Include a manual review step to confirm applications before sending:

**Nodes:**
- **Telegram / Email** → Sends “Approve / Skip” buttons to review applications.  
- **Webhook (Wait for response)** → Proceeds only if “Approve” is selected.

---

### 4. Kick Off the Application (Browser Automation)

Use a **HTTP Request node** to trigger an external **Apify actor** or **serverless function** that runs Playwright or Puppeteer.

This automation should:
- Open the `/apply` page.  
- Fill in applicant details (name, email, phone, LinkedIn, GitHub, etc.).  
- Upload resume and cover letter files.  
- Answer screening questions (work authorization, salary, relocation, etc.).  
- Submit the form.  
- Return a response with:
  - Status (submitted / failed)  
  - Confirmation ID (if available)  
  - Screenshot URL for verification  

---

### 5. Log Result & Notify

**Nodes:**
- **Set** → Prepares result data.  
- **Append Row in Google Sheets** → Logs company, role, URL, status, timestamp, and confirmation ID.  
- **Telegram / Email** → Sends success or failure notifications with screenshot evidence.

---

## Minimal n8n Flow (Node Names)

1. **Cron** — Triggers every 12 hours.  
2. **Search Jobs** — HTTP Request or Apify actor to scrape listings.  
3. **Clean + Normalize** — Code node outputs `{ company, role, url, description, position }`.  
4. **IF** — Filters by keywords, location, or URL containing `lever | greenhouse | workday`.  
5. **Deduplicate** — Checks Google Sheet or database to avoid re-applying.  
6. **Select Resume / CL** — Sets appropriate resume and cover letter variant by role.  
7. **(Optional) Approve?** — Sends Telegram message and waits for response.  
8. **Apply via Actor** — Triggers the Playwright or Apify endpoint.  
9. **Record Outcome** — Appends the result to Google Sheet or database.  
10. **Notify** — Sends Telegram or email update.

---

## Best Practices & Tips

- Use **Split in Batches** + **Wait** nodes to avoid spamming (e.g., one application per 60–120 seconds).  
- Keep **multiple resume and cover letter variants** tailored to different job categories.  
- Maintain a **blacklist** of companies to skip or avoid duplicates.  
- Implement a **retry** or **manual review** path for failed automations.  
- Use responsibly — some companies prohibit automated submissions.  
- Handle **CAPTCHAs or MFA steps manually** when they appear.

---

This setup gives you a robust semi-automated job application workflow:  
n8n handles the logic, filtering, and queueing, while an external browser automation service performs the actual submission.

